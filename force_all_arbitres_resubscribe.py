#!/usr/bin/env python3
"""
Script pour forcer tous les arbitres √† se r√©abonner aux notifications push
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arbitrage_project.settings')
django.setup()

from accounts.models import Arbitre, PushSubscription
from django.utils import timezone

def force_all_arbitres_resubscribe():
    """Forcer tous les arbitres √† se r√©abonner"""
    
    print("üîÑ FOR√áAGE DU R√âABONNEMENT POUR TOUS LES ARBITRES")
    print("=" * 60)
    
    # 1. Supprimer TOUS les abonnements existants
    print("\nüóëÔ∏è SUPPRESSION DE TOUS LES ABONNEMENTS EXISTANTS")
    
    total_existing = PushSubscription.objects.count()
    if total_existing > 0:
        PushSubscription.objects.all().delete()
        print(f"‚úÖ {total_existing} abonnements supprim√©s")
    else:
        print("‚ÑπÔ∏è  Aucun abonnement existant √† supprimer")
    
    # 2. Lister tous les arbitres actifs
    print("\nüë• LISTE DE TOUS LES ARBITRES ACTIFS")
    
    arbitres = Arbitre.objects.filter(is_active=True)
    total_arbitres = arbitres.count()
    
    print(f"üìä Total arbitres actifs: {total_arbitres}")
    
    for i, arbitre in enumerate(arbitres, 1):
        print(f"  {i:2d}. {arbitre.get_full_name()} (ID: {arbitre.id})")
    
    # 3. Instructions pour le r√©abonnement
    print("\nüìã INSTRUCTIONS POUR LE R√âABONNEMENT")
    print("=" * 50)
    
    print("üö® IMPORTANT : Tous les arbitres doivent maintenant se r√©abonner !")
    print("\nüì± √âTAPES POUR CHAQUE ARBITRE :")
    print("   1. Se connecter √† l'application frontend")
    print("   2. Aller dans les param√®tres de notifications")
    print("   3. D√©sactiver les notifications (bouton OFF)")
    print("   4. R√©activer les notifications (bouton ON)")
    print("   5. Accepter la demande de permission du navigateur")
    
    print("\nüîÑ ALTERNATIVE RAPIDE (Console navigateur) :")
    print("   Ex√©cuter ce code dans la console :")
    
    console_code = """
// Code √† ex√©cuter dans la console du navigateur
console.log('üîÑ For√ßage de la r√©inscription...');

// 1. D√©senregistrer le service worker
if ('serviceWorker' in navigator) {
    navigator.serviceWorker.getRegistrations().then(function(registrations) {
        for(let registration of registrations) {
            registration.unregister();
            console.log('‚úÖ Service Worker d√©senregistr√©');
        }
    });
}

// 2. Vider le cache
if ('caches' in window) {
    caches.keys().then(function(names) {
        for (let name of names) {
            caches.delete(name);
            console.log('üóëÔ∏è Cache supprim√©:', name);
        }
    });
}

// 3. Red√©marrer la page
console.log('üîÑ Red√©marrage dans 3 secondes...');
setTimeout(() => {
    window.location.reload();
}, 3000);
"""
    
    print(console_code)
    
    # 4. V√©rification finale
    print("\nüîç V√âRIFICATION FINALE")
    print("Apr√®s le r√©abonnement, v√©rifiez avec :")
    print("   python check_subscription.py")
    
    # 5. Cr√©er un fichier de guide
    guide_content = f"""# GUIDE DE R√âABONNEMENT AUX NOTIFICATIONS PUSH

## üö® SITUATION ACTUELLE
- Tous les abonnements ont √©t√© supprim√©s
- {total_arbitres} arbitres actifs sans abonnements
- Les notifications ne fonctionneront plus jusqu'au r√©abonnement

## üì± √âTAPES POUR CHAQUE ARBITRE

### Option 1 : Interface utilisateur
1. Se connecter √† l'application frontend
2. Aller dans les param√®tres de notifications
3. D√©sactiver les notifications (bouton OFF)
4. R√©activer les notifications (bouton ON)
5. Accepter la demande de permission du navigateur

### Option 2 : Console du navigateur
1. Ouvrir la console du navigateur (F12)
2. Ex√©cuter le code JavaScript fourni
3. Attendre le red√©marrage automatique
4. R√©activer les notifications

## ‚úÖ V√âRIFICATION
Apr√®s le r√©abonnement, v√©rifiez avec :
```bash
python check_subscription.py
```

## üéØ OBJECTIF
Tous les arbitres doivent avoir des abonnements actifs pour recevoir les notifications automatiques lors des d√©signations.

Date de cr√©ation : {timezone.now().strftime('%d/%m/%Y %H:%M')}
"""
    
    guide_file = "GUIDE_REABONNEMENT.md"
    with open(guide_file, 'w', encoding='utf-8') as f:
        f.write(guide_content)
    
    print(f"\nüìñ Guide cr√©√© : {guide_file}")
    
    return True

if __name__ == "__main__":
    success = force_all_arbitres_resubscribe()
    sys.exit(0 if success else 1)
