from django.core.management.base import BaseCommand
from django.test import Client
from accounts.models import PasswordResetToken, Arbitre
import json

class Command(BaseCommand):
    help = 'Test automatique pour d√©boguer le probl√®me de r√©initialisation de mot de passe'

    def handle(self, *args, **options):
        """Test automatique complet du flux de r√©initialisation de mot de passe"""
        
        self.stdout.write(self.style.SUCCESS('üîç Test automatique de r√©initialisation de mot de passe'))
        self.stdout.write('=' * 60)
        
        EMAIL = "ayoubramezkhoja2003@gmail.com"
        client = Client()
        
        # √âtape 1: Demander la r√©initialisation
        self.stdout.write('\n1Ô∏è‚É£ Demande de r√©initialisation...')
        response = client.post('/api/accounts/password-reset/request/', {
            'email': EMAIL
        })
        
        self.stdout.write(f"Status: {response.status_code}")
        self.stdout.write(f"Response: {response.json()}")
        
        if response.status_code != 200:
            self.stdout.write(self.style.ERROR('‚ùå √âchec de la demande de r√©initialisation'))
            return
        
        # √âtape 2: R√©cup√©rer le token et OTP depuis la base de donn√©es
        self.stdout.write('\n2Ô∏è‚É£ R√©cup√©ration du token et OTP depuis la base de donn√©es...')
        
        try:
            latest_token = PasswordResetToken.objects.filter(
                email=EMAIL,
                is_used=False
            ).order_by('-created_at').first()
            
            if not latest_token:
                self.stdout.write(self.style.ERROR('‚ùå Aucun token trouv√© dans la base de donn√©es'))
                return
            
            token = latest_token.token
            otp_code = latest_token.otp_code
            
            self.stdout.write(self.style.SUCCESS(f'‚úÖ Token trouv√©: {token[:20]}...'))
            self.stdout.write(self.style.SUCCESS(f'‚úÖ Code OTP: {otp_code}'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur lors de la r√©cup√©ration du token: {e}'))
            return
        
        # √âtape 3: V√©rifier l'OTP
        self.stdout.write('\n3Ô∏è‚É£ V√©rification du code OTP...')
        response = client.post('/api/accounts/password-reset/verify-otp/', {
            'token': token,
            'otp_code': otp_code
        })
        
        self.stdout.write(f"Status: {response.status_code}")
        self.stdout.write(f"Response: {response.json()}")
        
        if response.status_code != 200:
            self.stdout.write(self.style.ERROR('‚ùå √âchec de la v√©rification OTP'))
            return
        
        # √âtape 4: Confirmer la r√©initialisation
        self.stdout.write('\n4Ô∏è‚É£ Confirmation de la r√©initialisation...')
        new_password = "NouveauMotDePasse123!"
        
        response = client.post('/api/accounts/password-reset/confirm/', {
            'token': token,
            'new_password': new_password,
            'confirm_password': new_password
        })
        
        self.stdout.write(f"Status: {response.status_code}")
        self.stdout.write(f"Response: {response.json()}")
        
        if response.status_code == 200:
            self.stdout.write(self.style.SUCCESS('‚úÖ R√©initialisation r√©ussie!'))
            self.stdout.write(f'üîç Nouveau mot de passe: {new_password}')
            
            # √âtape 5: V√©rifier que le mot de passe a vraiment chang√©
            self.stdout.write('\n5Ô∏è‚É£ V√©rification du changement de mot de passe...')
            
            try:
                # R√©cup√©rer l'utilisateur depuis la base de donn√©es
                user = Arbitre.objects.get(email=EMAIL)
                self.stdout.write(f'üîç Utilisateur trouv√©: {user.first_name} {user.last_name}')
                self.stdout.write(f'üîç Mot de passe actuel (hash): {user.password}')
                
                # Tester la connexion avec le nouveau mot de passe
                self.stdout.write('\nüîç Test avec le nouveau mot de passe...')
                new_password_test = user.check_password(new_password)
                self.stdout.write(f'üîç Nouveau mot de passe valide: {new_password_test}')
                
                if new_password_test:
                    self.stdout.write(self.style.SUCCESS('‚úÖ Le mot de passe a √©t√© correctement chang√©!'))
                else:
                    self.stdout.write(self.style.ERROR('‚ùå Le mot de passe n\'a PAS √©t√© chang√©!'))
                    
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå Erreur lors de la v√©rification: {e}'))
        else:
            self.stdout.write(self.style.ERROR('‚ùå √âchec de la confirmation'))






