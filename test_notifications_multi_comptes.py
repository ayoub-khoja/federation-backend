#!/usr/bin/env python3
"""
Test des notifications sur plusieurs comptes arbitres
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arbitrage_project.settings')
django.setup()

from matches.models import Designation, Match
from accounts.models import Arbitre, PushSubscription
from notifications.services import push_service
from notifications.designation_service import designation_notification_service

def test_notifications_multi_comptes():
    """Tester les notifications sur plusieurs comptes arbitres"""
    
    print("üë• TEST DES NOTIFICATIONS SUR PLUSIEURS COMPTES")
    print("=" * 70)
    
    # 1. V√©rifier les arbitres disponibles
    print("\nüë• ARBITRES DISPONIBLES:")
    arbitres = Arbitre.objects.all()
    total_arbitres = arbitres.count()
    
    if total_arbitres == 0:
        print("  ‚ùå Aucun arbitre trouv√© dans la base")
        return False
    
    print(f"  Total arbitres: {total_arbitres}")
    
    for i, arbitre in enumerate(arbitres, 1):
        print(f"  {i}. {arbitre.get_full_name()} - {arbitre.email}")
        print(f"     Grade: {arbitre.grade}")
        print(f"     Ligue: {arbitre.ligue_arbitrage}")
        print()
    
    # 2. V√©rifier les abonnements push
    print("\nüì± √âTAT DES ABONNEMENTS PUSH:")
    arbitres_avec_abonnements = []
    arbitres_sans_abonnements = []
    
    for arbitre in arbitres:
        subscription = PushSubscription.objects.filter(
            arbitre=arbitre, 
            is_active=True
        ).first()
        
        if subscription:
            arbitres_avec_abonnements.append(arbitre)
            print(f"  ‚úÖ {arbitre.get_full_name()}: Abonn√© et actif")
            print(f"     Endpoint: {subscription.endpoint[:50]}...")
        else:
            arbitres_sans_abonnements.append(arbitre)
            print(f"  ‚ùå {arbitre.get_full_name()}: Pas d'abonnement")
    
    print(f"\n  üìä R√©sum√©:")
    print(f"     Arbitres avec abonnements: {len(arbitres_avec_abonnements)}")
    print(f"     Arbitres sans abonnements: {len(arbitres_sans_abonnements)}")
    
    if len(arbitres_avec_abonnements) == 0:
        print("\n  ‚ö†Ô∏è  Aucun arbitre avec abonnement - impossible de tester")
        print("  üí° Les arbitres doivent d'abord s'abonner aux notifications")
        return False
    
    # 3. Test d'envoi individuel √† chaque arbitre abonn√©
    print("\nüß™ TEST INDIVIDUEL PAR ARBITRE:")
    
    for i, arbitre in enumerate(arbitres_avec_abonnements, 1):
        print(f"\n  üì± Test {i}: {arbitre.get_full_name()}")
        print(f"     Email: {arbitre.email}")
        print(f"     Grade: {arbitre.grade}")
        
        try:
            # Envoyer une notification de test personnalis√©e
            result = push_service.send_notification_to_arbitres(
                arbitres=[arbitre],
                title=f"üß™ Test {i} - {arbitre.get_full_name()}",
                body=f"Ceci est un test de notification pour {arbitre.get_full_name()}",
                data={
                    'type': 'test_individual',
                    'arbitre_id': arbitre.id,
                    'arbitre_name': arbitre.get_full_name(),
                    'test_number': i,
                    'timestamp': datetime.now().isoformat()
                },
                tag=f'test_individual_{i}'
            )
            
            print(f"     R√©sultat: {result}")
            
            if result.get('success', 0) > 0:
                print(f"     ‚úÖ Notification envoy√©e avec succ√®s!")
            else:
                print(f"     ‚ùå √âchec de l'envoi")
                if result.get('errors'):
                    print(f"     Erreurs: {result['errors']}")
                    
        except Exception as e:
            print(f"     ‚ùå Exception: {e}")
    
    # 4. Test d'envoi en masse √† tous les arbitres abonn√©s
    print(f"\nüåê TEST D'ENVOI EN MASSE √Ä {len(arbitres_avec_abonnements)} ARBITRES:")
    
    try:
        result = push_service.send_notification_to_arbitres(
            arbitres=arbitres_avec_abonnements,
            title="üåê Test en Masse - Tous les Arbitres",
            body=f"Test d'envoi en masse √† {len(arbitres_avec_abonnements)} arbitres",
            data={
                'type': 'bulk_test_all',
                'total_arbitres': len(arbitres_avec_abonnements),
                'timestamp': datetime.now().isoformat()
            },
            tag='bulk_test_all'
        )
        
        print(f"  R√©sultat global: {result}")
        
        if result.get('success', 0) > 0:
            print(f"  ‚úÖ {result['success']} notifications envoy√©es avec succ√®s!")
            if result.get('failed', 0) > 0:
                print(f"  ‚ùå {result['failed']} √©checs")
        else:
            print("  ‚ùå √âchec de l'envoi en masse")
            
    except Exception as e:
        print(f"  ‚ùå Exception lors de l'envoi en masse: {e}")
        import traceback
        print(f"  Stack trace: {traceback.format_exc()}")
    
    # 5. Test de notifications de d√©signation
    print("\nüèÜ TEST DE NOTIFICATIONS DE D√âSIGNATION:")
    
    # V√©rifier s'il y a des matchs
    matchs = Match.objects.all()
    if not matchs.exists():
        print("  ‚ö†Ô∏è  Aucun match trouv√© - cr√©ation d'un match de test...")
        match_test = creer_match_test()
        if not match_test:
            print("  ‚ùå Impossible de cr√©er un match de test")
            return False
    else:
        match_test = matchs.first()
    
    print(f"  Match de test: {match_test}")
    
    # Cr√©er des d√©signations de test pour plusieurs arbitres
    designations_crees = []
    
    for i, arbitre in enumerate(arbitres_avec_abonnements[:3], 1):  # Limiter √† 3 pour le test
        try:
            # Cr√©er une d√©signation
            designation = Designation.objects.create(
                match=match_test,
                arbitre=arbitre,
                role='arbitre_principal',
                status='en_attente'
            )
            
            designations_crees.append(designation)
            print(f"  ‚úÖ D√©signation {i} cr√©√©e pour {arbitre.get_full_name()}")
            
            # Envoyer la notification de d√©signation
            result = designation_notification_service.notify_designation_created(
                arbitres=[arbitre],
                match_info={
                    'id': match_test.id,
                    'home_team': match_test.home_team,
                    'away_team': match_test.away_team,
                    'date': match_test.match_date.isoformat() if match_test.match_date else 'Non d√©finie',
                    'stade': match_test.stadium or 'Non d√©fini'
                }
            )
            
            print(f"     Notification: {result}")
            
        except Exception as e:
            print(f"  ‚ùå Erreur pour {arbitre.get_full_name()}: {e}")
    
    # 6. Nettoyage des d√©signations de test
    if designations_crees:
        print(f"\nüßπ NETTOYAGE DES {len(designations_crees)} D√âSIGNATIONS DE TEST:")
        
        for designation in designations_crees:
            try:
                designation.delete()
                print(f"  ‚úÖ D√©signation supprim√©e: {designation}")
            except Exception as e:
                print(f"  ‚ùå Erreur suppression: {e}")
    
    # 7. R√©sum√© final
    print("\nüìä R√âSUM√â DU TEST MULTI-COMPTES:")
    print("=" * 50)
    print(f"  Total arbitres: {total_arbitres}")
    print(f"  Arbitres avec abonnements: {len(arbitres_avec_abonnements)}")
    print(f"  Arbitres sans abonnements: {len(arbitres_sans_abonnements)}")
    print(f"  Tests individuels effectu√©s: {len(arbitres_avec_abonnements)}")
    print(f"  Test en masse: {'‚úÖ' if len(arbitres_avec_abonnements) > 0 else '‚ùå'}")
    print(f"  Tests de d√©signation: {len(designations_crees)}")
    
    if len(arbitres_avec_abonnements) > 0:
        print("\nüéâ TESTS R√âUSSIS!")
        print("  Les notifications fonctionnent correctement sur plusieurs comptes")
    else:
        print("\n‚ùå TESTS INCOMPLETS")
        print("  Aucun arbitre n'a d'abonnement actif")
    
    return True

def creer_match_test():
    """Cr√©er un match de test"""
    
    try:
        # Cr√©er un match simple
        match = Match.objects.create(
            home_team="√âquipe A",
            away_team="√âquipe B",
            match_date=datetime.now().date() + timedelta(days=7),
            match_time=datetime.now().time(),
            stadium="Stade de Test",
            status='scheduled'
        )
        
        print(f"  ‚úÖ Match de test cr√©√©: {match}")
        return match
        
    except Exception as e:
        print(f"  ‚ùå Erreur cr√©ation match: {e}")
        return False

def afficher_instructions_abonnement():
    """Afficher les instructions pour s'abonner aux notifications"""
    
    print("\nüí° INSTRUCTIONS POUR S'ABONNER AUX NOTIFICATIONS:")
    print("=" * 60)
    print("  1. Ouvrir le frontend: http://localhost:3000")
    print("  2. Se connecter avec un compte arbitre")
    print("  3. Aller dans le profil utilisateur")
    print("  4. Activer les notifications push")
    print("  5. Accepter la permission dans le navigateur")
    print("  6. V√©rifier que l'abonnement est cr√©√©")
    print("  7. Revenir ici et relancer le test")
    print("\n  üîß En cas de probl√®me:")
    print("     - V√©rifier la console du navigateur")
    print("     - V√©rifier les permissions du navigateur")
    print("     - V√©rifier que le service worker est install√©")

if __name__ == "__main__":
    print("üöÄ TEST DES NOTIFICATIONS SUR PLUSIEURS COMPTES")
    print("=" * 70)
    
    try:
        # Test principal
        success = test_notifications_multi_comptes()
        
        if not success:
            print("\nüí° Aucun arbitre avec abonnement trouv√©")
            afficher_instructions_abonnement()
        
    except Exception as e:
        print(f"\nüí• ERREUR CRITIQUE: {e}")
        import traceback
        print(f"Stack trace: {traceback.format_exc()}")
    
    print("\n" + "=" * 70)
    print("‚úÖ TEST TERMIN√â")
