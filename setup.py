#!/usr/bin/env python
"""
Script de configuration automatique pour le backend Django
"""
import os
import sys
import subprocess
import secrets

def run_command(command, description):
    """Ex√©cuter une commande avec gestion d'erreur"""
    print(f"üì¶ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Termin√©")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de {description}")
        print(f"Erreur: {e.stderr}")
        return False

def create_env_file():
    """Cr√©er le fichier .env avec une cl√© secr√®te g√©n√©r√©e"""
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  Le fichier .env existe d√©j√†, ignor√©")
        return
    
    secret_key = secrets.token_urlsafe(50)
    env_content = f"""# Configuration d'environnement Django
SECRET_KEY={secret_key}
DEBUG=True

# Base de donn√©es (SQLite par d√©faut)
# D√©commentez pour PostgreSQL :
# DB_NAME=arbitrage_db
# DB_USER=postgres
# DB_PASSWORD=your_password
# DB_HOST=localhost
# DB_PORT=5432
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    print("‚úÖ Fichier .env cr√©√© avec une cl√© secr√®te g√©n√©r√©e")

def main():
    """Script principal de configuration"""
    print("üöÄ Configuration automatique du backend Django")
    print("=" * 50)
    
    # V√©rifier Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou plus r√©cent est requis")
        sys.exit(1)
    
    # Cr√©er le fichier .env
    create_env_file()
    
    # Installer les d√©pendances
    if not run_command("pip install -r requirements.txt", "Installation des d√©pendances"):
        print("‚ùå Impossible d'installer les d√©pendances")
        sys.exit(1)
    
    # Migrations
    if not run_command("python manage.py makemigrations", "Cr√©ation des migrations"):
        print("‚ùå Erreur lors de la cr√©ation des migrations")
        sys.exit(1)
    
    if not run_command("python manage.py migrate", "Application des migrations"):
        print("‚ùå Erreur lors de l'application des migrations")
        sys.exit(1)
    
    print("\nüéâ Configuration termin√©e avec succ√®s !")
    print("\nüìã Prochaines √©tapes :")
    print("1. Cr√©er un super utilisateur :")
    print("   python manage.py createsuperuser")
    print("\n2. Lancer le serveur :")
    print("   python manage.py runserver")
    print("\n3. Pour acc√®s mobile :")
    print("   python manage.py runserver 0.0.0.0:8000")
    print("\n4. Interface admin :")
    print("   http://localhost:8000/admin/")
    print("\n5. API de sant√© :")
    print("   http://localhost:8000/api/auth/health/")

if __name__ == "__main__":
    main()













