#!/usr/bin/env python
"""
Test des notifications de d√©signation d'arbitres
"""
import os
import sys
import django
from datetime import datetime, timedelta

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arbitrage_project.settings')
django.setup()

from accounts.models import Arbitre, NotificationDesignation, FCMToken
from accounts.views import notify_arbitre_designation, notify_multiple_arbitres
from django.test import RequestFactory
from django.contrib.auth import get_user_model
import json

def test_notification_designation():
    """Test complet du syst√®me de notifications de d√©signation"""
    print("üèÜ Test du Syst√®me de Notifications de D√©signation")
    print("=" * 60)
    
    # 1. Cr√©er un arbitre de test
    print("1Ô∏è‚É£ Cr√©ation d'un arbitre de test...")
    arbitre, created = Arbitre.objects.get_or_create(
        phone_number='+21699999999',
        defaults={
            'first_name': 'Test',
            'last_name': 'Designation',
            'email': 'test.designation@example.com',
            'grade': '2eme_serie',
            'role': 'arbitre'
        }
    )
    
    if created:
        print(f"   ‚úÖ Arbitre cr√©√©: {arbitre.get_full_name()}")
    else:
        print(f"   ‚úÖ Arbitre existant: {arbitre.get_full_name()}")
    
    # 2. Cr√©er un token FCM de test
    print("\n2Ô∏è‚É£ Cr√©ation d'un token FCM de test...")
    fcm_token, created = FCMToken.objects.get_or_create(
        token='test_designation_token_123456789',
        defaults={
            'arbitre': arbitre,
            'device_type': 'android',
            'device_id': 'test_device_designation_123',
            'app_version': '1.0.0',
            'is_active': True
        }
    )
    
    if created:
        print(f"   ‚úÖ Token FCM cr√©√©: {fcm_token}")
    else:
        print(f"   ‚úÖ Token FCM existant: {fcm_token}")
    
    # 3. Cr√©er une notification de d√©signation de test
    print("\n3Ô∏è‚É£ Cr√©ation d'une notification de d√©signation...")
    notification = NotificationDesignation.objects.create(
        arbitre=arbitre,
        match_id=123,
        match_nom="Match de Test - √âquipe A vs √âquipe B",
        match_date=datetime.now() + timedelta(days=7),
        match_lieu="Stade Municipal de Test",
        designation_type='arbitre_principal',
        title="üèÜ Nouvelle D√©signation - Match de Test",
        message="Vous avez √©t√© d√©sign√© comme arbitre principal pour le match √âquipe A vs √âquipe B le 15/01/2024 √† 14h00 au Stade Municipal.",
        status='sent'
    )
    
    print(f"   ‚úÖ Notification cr√©√©e: {notification}")
    print(f"   üì± Match: {notification.match_nom}")
    print(f"   üèÜ Type: {notification.get_designation_type_display()}")
    print(f"   üìÖ Date: {notification.match_date}")
    print(f"   üìç Lieu: {notification.match_lieu}")
    
    # 4. Tester les m√©thodes du mod√®le
    print("\n4Ô∏è‚É£ Test des m√©thodes du mod√®le...")
    
    # Marquer comme livr√©e
    notification.mark_as_delivered()
    print(f"   ‚úÖ Statut mis √† jour: {notification.get_status_display()}")
    
    # Marquer comme lue
    notification.mark_as_read()
    print(f"   ‚úÖ Notification marqu√©e comme lue: {notification.is_read}")
    print(f"   üìÖ Date de lecture: {notification.read_at}")
    
    # V√©rifier les propri√©t√©s
    print(f"   ‚è∞ Temps √©coul√©: {notification.time_since_created}")
    print(f"   üÜï Notification r√©cente: {notification.is_recent}")
    
    # 5. Tester la r√©cup√©ration des notifications
    print("\n5Ô∏è‚É£ Test de r√©cup√©ration des notifications...")
    notifications = NotificationDesignation.objects.filter(arbitre=arbitre)
    print(f"   üìä Total notifications pour {arbitre.get_full_name()}: {notifications.count()}")
    
    for notif in notifications:
        print(f"   - {notif.match_nom} ({notif.get_designation_type_display()}) - {notif.get_status_display()}")
    
    # 6. Statistiques
    print("\n6Ô∏è‚É£ Statistiques des notifications...")
    total_notifications = NotificationDesignation.objects.count()
    notifications_sent = NotificationDesignation.objects.filter(status='sent').count()
    notifications_delivered = NotificationDesignation.objects.filter(status='delivered').count()
    notifications_read = NotificationDesignation.objects.filter(is_read=True).count()
    
    print(f"   üìà Total notifications: {total_notifications}")
    print(f"   üì§ Envoy√©es: {notifications_sent}")
    print(f"   üì® Livr√©es: {notifications_delivered}")
    print(f"   üëÅÔ∏è Lues: {notifications_read}")
    
    return True

def test_api_endpoints():
    """Test des endpoints API (simulation)"""
    print("\n7Ô∏è‚É£ Test des endpoints API...")
    
    # Simuler les donn√©es pour les endpoints
    notification_data = {
        "arbitre_id": 1,
        "arbitre_nom": "Test Designation",
        "arbitre_email": "test.designation@example.com",
        "match_id": 456,
        "match_nom": "Match de Championnat",
        "match_date": "2024-01-15T14:00:00Z",
        "match_lieu": "Stade Municipal",
        "designation_type": "arbitre_principal",
        "message": "Vous avez √©t√© d√©sign√© comme arbitre principal"
    }
    
    print("   üìã Donn√©es de test pour l'API:")
    for key, value in notification_data.items():
        print(f"      {key}: {value}")
    
    # Simuler les donn√©es pour plusieurs notifications
    multiple_notifications = {
        "notifications": [
            {
                "arbitre_id": 1,
                "arbitre_nom": "Test Designation",
                "arbitre_email": "test.designation@example.com",
                "match_id": 456,
                "match_nom": "Match de Championnat",
                "match_date": "2024-01-15T14:00:00Z",
                "match_lieu": "Stade Municipal",
                "designation_type": "arbitre_principal",
                "message": "Vous avez √©t√© d√©sign√© comme arbitre principal"
            },
            {
                "arbitre_id": 1,
                "arbitre_nom": "Test Designation",
                "arbitre_email": "test.designation@example.com",
                "match_id": 457,
                "match_nom": "Match de Coupe",
                "match_date": "2024-01-20T16:00:00Z",
                "match_lieu": "Stade National",
                "designation_type": "arbitre_assistant_1",
                "message": "Vous avez √©t√© d√©sign√© comme assistant 1"
            }
        ]
    }
    
    print(f"   üìã Donn√©es pour notifications multiples: {len(multiple_notifications['notifications'])} notifications")
    
    return True

def main():
    """Fonction principale"""
    try:
        # Test du syst√®me de notifications
        success = test_notification_designation()
        
        if not success:
            print("\n‚ùå Le test a √©chou√©")
            return
        
        # Test des endpoints API
        test_api_endpoints()
        
        print("\n" + "=" * 60)
        print("üéâ SYST√àME DE NOTIFICATIONS DE D√âSIGNATION OP√âRATIONNEL!")
        print("=" * 60)
        
        print("\nüìã Endpoints API disponibles:")
        print("   1. ‚úÖ POST /api/accounts/arbitres/notify-designation/")
        print("   2. ‚úÖ POST /api/accounts/arbitres/notify-multiple/")
        print("   3. ‚úÖ GET /api/accounts/arbitres/{arbitre_id}/notifications/")
        print("   4. ‚úÖ POST /api/accounts/notifications/{notification_id}/read/")
        
        print("\nüîß Fonctionnalit√©s impl√©ment√©es:")
        print("   ‚úÖ Mod√®le NotificationDesignation")
        print("   ‚úÖ Envoi de notifications FCM")
        print("   ‚úÖ Historique des notifications")
        print("   ‚úÖ Marquage comme lu")
        print("   ‚úÖ Gestion des erreurs")
        print("   ‚úÖ Pagination")
        print("   ‚úÖ Filtres par statut")
        
        print("\nüì± Types de d√©signation support√©s:")
        print("   - arbitre_principal")
        print("   - arbitre_assistant_1")
        print("   - arbitre_assistant_2")
        print("   - arbitre_quatrieme")
        print("   - commissaire_match")
        
        print("\nüìä Statuts des notifications:")
        print("   - sent (Envoy√©e)")
        print("   - delivered (Livr√©e)")
        print("   - read (Lue)")
        print("   - failed (√âchou√©e)")
        
        print("\nüöÄ Le backend est pr√™t pour les notifications de d√©signation!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()









