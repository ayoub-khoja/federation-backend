#!/usr/bin/env python3
"""
Script pour red√©marrer le serveur de production et forcer la mise √† jour de l'admin
"""

import os
import sys
import django
from pathlib import Path

# Ajouter le r√©pertoire backend au path Python
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

# Configuration de l'environnement Django pour la production
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arbitrage_project.settings_production')

def clear_cache():
    """Nettoyer le cache Django"""
    print("üßπ Nettoyage du cache...")
    try:
        # Nettoyer le cache des mod√®les
        from django.core.cache import cache
        cache.clear()
        print("‚úÖ Cache nettoy√©")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors du nettoyage du cache: {e}")

def reload_models():
    """Recharger les mod√®les"""
    print("üîÑ Rechargement des mod√®les...")
    try:
        # Forcer le rechargement des mod√®les
        from django.apps import apps
        apps.clear_cache()
        print("‚úÖ Mod√®les recharg√©s")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors du rechargement: {e}")

def check_admin_interface():
    """V√©rifier l'interface d'administration"""
    print("üîç V√©rification de l'interface d'administration...")
    
    try:
        # Initialiser Django
        django.setup()
        
        from django.contrib import admin
        from accounts.models import GradeArbitrage, LigueArbitrage
        
        print("\nüìã MOD√àLES ENREGISTR√âS DANS L'ADMIN:")
        print("-" * 40)
        
        # Lister tous les mod√®les de l'app accounts
        from accounts import models as accounts_models
        for attr_name in dir(accounts_models):
            attr = getattr(accounts_models, attr_name)
            if hasattr(attr, '_meta') and hasattr(attr._meta, 'app_label'):
                if attr._meta.app_label == 'accounts':
                    is_registered = attr in admin.site._registry
                    status = "‚úÖ" if is_registered else "‚ùå"
                    print(f"{status} {attr._meta.verbose_name_plural} ({attr.__name__})")
        
        # V√©rifier sp√©cifiquement GradeArbitrage
        if GradeArbitrage in admin.site._registry:
            print(f"\n‚úÖ GradeArbitrage est bien enregistr√©!")
            print(f"   - Nom d'affichage: {admin.site._registry[GradeArbitrage].model._meta.verbose_name_plural}")
            print(f"   - Classe admin: {admin.site._registry[GradeArbitrage].__class__.__name__}")
        else:
            print("\n‚ùå GradeArbitrage n'est PAS enregistr√©!")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")

def main():
    """Fonction principale"""
    print("üöÄ RED√âMARRAGE COMPLET DU SERVEUR DE PRODUCTION")
    print("=" * 60)
    
    # Nettoyer le cache
    clear_cache()
    
    # Recharger les mod√®les
    reload_models()
    
    # V√©rifier l'interface d'administration
    check_admin_interface()
    
    print("\n" + "=" * 60)
    print("‚úÖ RED√âMARRAGE TERMIN√â")
    print("=" * 60)
    print("üîÑ Actions √† effectuer:")
    print("   1. Red√©marrez votre serveur de production")
    print("   2. Rafra√Æchissez votre interface d'administration")
    print("   3. V√©rifiez que 'Grades d'arbitrage' appara√Æt dans le menu")
    print("\nüì± Si le probl√®me persiste, v√©rifiez les logs du serveur")

if __name__ == "__main__":
    main()
