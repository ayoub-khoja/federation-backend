#!/usr/bin/env python3
"""
Cr√©ation de cl√©s VAPID fonctionnelles pour le navigateur
"""

import os
import sys
import base64
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend

def create_working_vapid_keys():
    """Cr√©er des cl√©s VAPID qui fonctionnent r√©ellement"""
    
    print("üîë CR√âATION DE CL√âS VAPID FONCTIONNELLES")
    print("=" * 50)
    
    try:
        # G√©n√©rer une nouvelle paire de cl√©s EC
        private_key = ec.generate_private_key(
            ec.SECP256R1(), 
            default_backend()
        )
        
        # Extraire la cl√© publique
        public_key = private_key.public_key()
        
        # Convertir en format DER
        private_der = private_key.private_bytes(
            encoding=serialization.Encoding.DER,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        )
        
        public_der = public_key.public_bytes(
            encoding=serialization.Encoding.DER,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        
        # Convertir en base64 URL-safe
        private_b64 = base64.urlsafe_b64encode(private_der).decode('utf-8')
        public_b64 = base64.urlsafe_b64encode(public_der).decode('utf-8')
        
        print("‚úÖ Nouvelles cl√©s VAPID fonctionnelles g√©n√©r√©es!")
        print(f"\nüîê Cl√© priv√©e VAPID:")
        print(f"   {private_b64}")
        print(f"\nüîì Cl√© publique VAPID:")
        print(f"   {public_b64}")
        
        # Mettre √† jour vapid_config.py
        update_vapid_config(private_b64, public_b64)
        
        return private_b64, public_b64
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        return None, None

def update_vapid_config(private_key, public_key):
    """Mettre √† jour le fichier vapid_config.py"""
    
    print("\nüìù MISE √Ä JOUR DE VAPID_CONFIG.PY")
    print("=" * 40)
    
    try:
        config_content = f'''#!/usr/bin/env python3
"""
Configuration VAPID pour les notifications push
"""

# Cl√©s VAPID fonctionnelles
VAPID_PRIVATE_KEY = "{private_key}"
VAPID_PUBLIC_KEY = "{public_key}"
VAPID_EMAIL = "admin@arbitrage.tn"

# Configuration des notifications
NOTIFICATION_CONFIG = {{
    'default_icon': '/static/images/notification-icon.png',
    'default_badge': '/static/images/badge-icon.png',
    'default_tag': 'arbitrage',
    'require_interaction': True,
    'silent': False,
    'vibrate': [200, 100, 200],
    'actions': [
        {{
            'action': 'view',
            'title': 'Voir',
            'icon': '/static/images/view-icon.png'
        }},
        {{
            'action': 'dismiss',
            'title': 'Fermer'
        }}
    ]
}}

# Types de notifications support√©s
NOTIFICATION_TYPES = {{
    'designation_created': {{
        'title': 'üèÜ Nouvelle D√©signation d\\'Arbitrage',
        'icon': '/static/images/designation-icon.png',
        'tag': 'designation',
        'priority': 'high'
    }},
    'designation_updated': {{
        'title': 'üîÑ D√©signation Mise √† Jour',
        'icon': '/static/images/update-icon.png',
        'tag': 'designation_update',
        'priority': 'normal'
    }},
    'designation_cancelled': {{
        'title': '‚ùå D√©signation Annul√©e',
        'icon': '/static/images/cancel-icon.png',
        'tag': 'designation_cancel',
        'priority': 'high'
    }},
    'match_reminder': {{
        'title': '‚è∞ Rappel de Match',
        'icon': '/static/images/reminder-icon.png',
        'tag': 'reminder',
        'priority': 'normal'
    }}
}}
'''
        
        with open('vapid_config.py', 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        print("‚úÖ vapid_config.py mis √† jour")
        
        # Mettre √† jour le frontend
        update_frontend_config(public_key)
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour: {e}")

def update_frontend_config(public_key):
    """Mettre √† jour la configuration frontend"""
    
    print("\nüåê MISE √Ä JOUR DU FRONTEND")
    print("=" * 35)
    
    try:
        frontend_path = "../frontend/src/config/environment.ts"
        
        if os.path.exists(frontend_path):
            with open(frontend_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Remplacer la cl√© publique VAPID
            import re
            new_content = re.sub(
                r"PUBLIC_KEY: '[^']*'",
                f"PUBLIC_KEY: '{public_key}'",
                content
            )
            
            with open(frontend_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print("‚úÖ environment.ts mis √† jour")
        else:
            print("‚ö†Ô∏è  Fichier frontend non trouv√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour frontend: {e}")

def test_vapid_keys():
    """Tester que les cl√©s VAPID sont valides"""
    
    print("\nüß™ TEST DES CL√âS VAPID")
    print("=" * 30)
    
    try:
        from vapid_config import VAPID_PRIVATE_KEY, VAPID_PUBLIC_KEY
        
        print(f"‚úÖ Cl√© priv√©e: {len(VAPID_PRIVATE_KEY)} caract√®res")
        print(f"‚úÖ Cl√© publique: {len(VAPID_PUBLIC_KEY)} caract√®res")
        
        # V√©rifier que les cl√©s sont diff√©rentes
        if VAPID_PRIVATE_KEY != VAPID_PUBLIC_KEY:
            print("‚úÖ Cl√©s priv√©e et publique sont diff√©rentes")
        else:
            print("‚ùå Cl√©s identiques - probl√®me d√©tect√©")
            
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ CR√âATION DE CL√âS VAPID FONCTIONNELLES")
    print("=" * 50)
    
    # Cr√©er de nouvelles cl√©s VAPID
    private_key, public_key = create_working_vapid_keys()
    
    if private_key and public_key:
        # Tester les nouvelles cl√©s
        if test_vapid_keys():
            print("\n" + "=" * 50)
            print("‚úÖ CR√âATION TERMIN√âE AVEC SUCC√àS!")
            print("\nüí° Prochaines √©tapes:")
            print("   1. Red√©marrer le serveur Django")
            print("   2. Red√©marrer le frontend")
            print("   3. Tester la cr√©ation d'abonnement")
            print("   4. V√©rifier que l'erreur VAPID est r√©solue")
        else:
            print("‚ùå Test des cl√©s √©chou√©")
    else:
        print("‚ùå Cr√©ation des cl√©s √©chou√©e")
    
    sys.exit(0 if private_key and public_key else 1)








