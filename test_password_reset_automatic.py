#!/usr/bin/env python3
"""
Test automatique pour d√©boguer le probl√®me de r√©initialisation de mot de passe
Ce script simule tout le processus sans interaction utilisateur
"""

import requests
import json
import time
from accounts.models import PasswordResetToken, Arbitre

# Configuration
BASE_URL = "http://localhost:8000"
EMAIL = "ayoubramezkhoja2003@gmail.com"

def test_password_reset_automatic():
    """Test automatique complet du flux de r√©initialisation de mot de passe"""
    
    print("üîç Test automatique de r√©initialisation de mot de passe")
    print("=" * 60)
    
    # √âtape 1: Demander la r√©initialisation
    print("\n1Ô∏è‚É£ Demande de r√©initialisation...")
    response = requests.post(f"{BASE_URL}/api/accounts/password-reset/request/", {
        'email': EMAIL
    })
    
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    
    if response.status_code != 200:
        print("‚ùå √âchec de la demande de r√©initialisation")
        return
    
    # √âtape 2: R√©cup√©rer le token et OTP depuis la base de donn√©es
    print("\n2Ô∏è‚É£ R√©cup√©ration du token et OTP depuis la base de donn√©es...")
    
    # Trouver le token le plus r√©cent pour cet email
    try:
        latest_token = PasswordResetToken.objects.filter(
            email=EMAIL,
            is_used=False
        ).order_by('-created_at').first()
        
        if not latest_token:
            print("‚ùå Aucun token trouv√© dans la base de donn√©es")
            return
        
        token = latest_token.token
        otp_code = latest_token.otp_code
        
        print(f"‚úÖ Token trouv√©: {token[:20]}...")
        print(f"‚úÖ Code OTP: {otp_code}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration du token: {e}")
        return
    
    # √âtape 3: V√©rifier l'OTP
    print("\n3Ô∏è‚É£ V√©rification du code OTP...")
    response = requests.post(f"{BASE_URL}/api/accounts/password-reset/verify-otp/", {
        'token': token,
        'otp_code': otp_code
    })
    
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    
    if response.status_code != 200:
        print("‚ùå √âchec de la v√©rification OTP")
        return
    
    # √âtape 4: Confirmer la r√©initialisation
    print("\n4Ô∏è‚É£ Confirmation de la r√©initialisation...")
    new_password = "NouveauMotDePasse123!"
    
    response = requests.post(f"{BASE_URL}/api/accounts/password-reset/confirm/", {
        'token': token,
        'new_password': new_password,
        'confirm_password': new_password
    })
    
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    
    if response.status_code == 200:
        print("‚úÖ R√©initialisation r√©ussie!")
        print(f"üîç Nouveau mot de passe: {new_password}")
        
        # √âtape 5: V√©rifier que le mot de passe a vraiment chang√©
        print("\n5Ô∏è‚É£ V√©rification du changement de mot de passe...")
        
        try:
            # R√©cup√©rer l'utilisateur depuis la base de donn√©es
            user = Arbitre.objects.get(email=EMAIL)
            print(f"üîç Utilisateur trouv√©: {user.first_name} {user.last_name}")
            print(f"üîç Mot de passe actuel (hash): {user.password}")
            
            # Tester la connexion avec l'ancien mot de passe
            print("\nüîç Test avec l'ancien mot de passe...")
            old_password_test = user.check_password("ancien_mot_de_passe")  # Remplacez par l'ancien mot de passe
            print(f"üîç Ancien mot de passe valide: {old_password_test}")
            
            # Tester la connexion avec le nouveau mot de passe
            print("\nüîç Test avec le nouveau mot de passe...")
            new_password_test = user.check_password(new_password)
            print(f"üîç Nouveau mot de passe valide: {new_password_test}")
            
            if new_password_test:
                print("‚úÖ Le mot de passe a √©t√© correctement chang√©!")
            else:
                print("‚ùå Le mot de passe n'a PAS √©t√© chang√©!")
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification: {e}")
    else:
        print("‚ùå √âchec de la confirmation")

if __name__ == "__main__":
    test_password_reset_automatic()








