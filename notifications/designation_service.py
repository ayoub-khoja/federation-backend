#!/usr/bin/env python3
"""
Service de notifications automatiques pour les d√©signations d'arbitrage
"""

from typing import List, Dict, Any
from django.utils import timezone
from accounts.models import Arbitre, PushSubscription
from .services import push_service

class DesignationNotificationService:
    """Service pour envoyer des notifications automatiques lors de la cr√©ation de d√©signations"""
    
    @staticmethod
    def notify_designation_created(arbitres: List[Arbitre], match_info: Dict[str, Any]):
        """
        Envoyer une notification automatique aux arbitres d√©sign√©s
        
        Args:
            arbitres: Liste des arbitres d√©sign√©s
            match_info: Informations sur le match
        """
        try:
            # Envoyer la notification via le service push
            result = push_service.send_designation_notification(
                arbitres=arbitres,
                match_info=match_info
            )
            
            print(f"üîî Notifications de d√©signation envoy√©es: {result}")
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'envoi des notifications de d√©signation: {e}")
            return {
                'success': 0,
                'failed': len(arbitres),
                'errors': [str(e)]
            }
    
    @staticmethod
    def notify_designation_updated(arbitres: List[Arbitre], match_info: Dict[str, Any]):
        """
        Envoyer une notification de mise √† jour de d√©signation
        
        Args:
            arbitres: Liste des arbitres concern√©s
            match_info: Informations mises √† jour sur le match
        """
        try:
            title = "üîÑ D√©signation Mise √† Jour"
            body = f"Mise √† jour de votre d√©signation pour le match {match_info.get('home_team', '')} vs {match_info.get('away_team', '')}"
            
            data = {
                'type': 'designation_updated',
                'match_id': match_info.get('id'),
                'date_match': match_info.get('date'),
                'stade': match_info.get('stade'),
                'action_url': f'/matches/{match_info.get("id")}/designation'
            }
            
            result = push_service.send_notification_to_arbitres(
                arbitres=arbitres,
                title=title,
                body=body,
                data=data,
                tag='designation_updated'
            )
            
            print(f"üîÑ Notifications de mise √† jour envoy√©es: {result}")
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'envoi des notifications de mise √† jour: {e}")
            return {
                'success': 0,
                'failed': len(arbitres),
                'errors': [str(e)]
            }
    
    @staticmethod
    def notify_designation_cancelled(arbitres: List[Arbitre], match_info: Dict[str, Any]):
        """
        Envoyer une notification d'annulation de d√©signation
        
        Args:
            arbitres: Liste des arbitres concern√©s
            match_info: Informations sur le match annul√©
        """
        try:
            title = "‚ùå D√©signation Annul√©e"
            body = f"Votre d√©signation pour le match {match_info.get('home_team', '')} vs {match_info.get('away_team', '')} a √©t√© annul√©e"
            
            data = {
                'type': 'designation_cancelled',
                'match_id': match_info.get('id'),
                'date_match': match_info.get('date'),
                'stade': match_info.get('stade'),
                'action_url': '/designations'
            }
            
            result = push_service.send_notification_to_arbitres(
                arbitres=arbitres,
                title=title,
                body=body,
                data=data,
                tag='designation_cancelled'
            )
            
            print(f"‚ùå Notifications d'annulation envoy√©es: {result}")
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'envoi des notifications d'annulation: {e}")
            return {
                'success': 0,
                'failed': len(arbitres),
                'errors': [str(e)]
            }

# Instance globale du service
designation_notification_service = DesignationNotificationService()
