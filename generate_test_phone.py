#!/usr/bin/env python
"""
Script pour g√©n√©rer des num√©ros de t√©l√©phone uniques pour les tests
"""
import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arbitrage_project.settings')
django.setup()

from accounts.models import Arbitre

def generate_unique_phone():
    """G√©n√®re un num√©ro de t√©l√©phone unique pour les tests"""
    base_number = 12345678  # Num√©ro de base
    
    for i in range(100):  # Essayer jusqu'√† 100 num√©ros
        test_number = f"+216{base_number + i}"
        
        # V√©rifier si le num√©ro existe d√©j√†
        if not Arbitre.objects.filter(phone_number=test_number).exists():
            print(f"‚úÖ Num√©ro de t√©l√©phone unique disponible: {test_number}")
            return test_number
    
    print("‚ùå Aucun num√©ro de t√©l√©phone unique trouv√© dans la plage test√©e")
    return None

def list_existing_phones():
    """Liste les num√©ros de t√©l√©phone existants"""
    print("üì± Num√©ros de t√©l√©phone existants:")
    arbitres = Arbitre.objects.all().values_list('phone_number', 'first_name', 'last_name')
    
    if not arbitres:
        print("   Aucun arbitre enregistr√©")
    else:
        for phone, first_name, last_name in arbitres:
            print(f"   {phone} - {first_name} {last_name}")

if __name__ == "__main__":
    print("üîç V√©rification des num√©ros de t√©l√©phone existants...")
    list_existing_phones()
    print()
    
    print("üîß G√©n√©ration d'un num√©ro de t√©l√©phone unique pour les tests...")
    unique_phone = generate_unique_phone()
    
    if unique_phone:
        print(f"\nüí° Utilisez ce num√©ro pour vos tests: {unique_phone}")
        print("   Exemple de donn√©es de test:")
        print(f'   {{"phone_number": "{unique_phone}", "first_name": "Test", "last_name": "User", ...}}')
    else:
        print("\n‚ùå Impossible de g√©n√©rer un num√©ro unique. Supprimez des comptes de test ou utilisez un autre format.")
