# Script PowerShell pour importer les grades en production
# Utilise la commande Django existante avec la configuration de production

Write-Host "üèÜ IMPORTATION DES GRADES D'ARBITRAGE - PRODUCTION" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "manage.py")) {
    Write-Host "‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le r√©pertoire backend" -ForegroundColor Red
    exit 1
}

# V√©rifier que le fichier YAML existe
if (-not (Test-Path "data/grades.yaml")) {
    Write-Host "‚ùå Erreur: Le fichier data/grades.yaml n'existe pas" -ForegroundColor Red
    exit 1
}

Write-Host "üîß Configuration: PRODUCTION" -ForegroundColor Green
Write-Host "üóÑÔ∏è Base de donn√©es: PostgreSQL" -ForegroundColor Green
Write-Host "üìÅ Fichier source: data/grades.yaml" -ForegroundColor Green
Write-Host ""

# Demander confirmation
$response = Read-Host "‚ùì Voulez-vous continuer avec l'importation? (oui/non)"
if ($response -notmatch "^(oui|o|yes|y)$") {
    Write-Host "‚ùå Importation annul√©e par l'utilisateur" -ForegroundColor Yellow
    exit 0
}

Write-Host ""
Write-Host "üöÄ Lancement de l'importation..." -ForegroundColor Yellow
Write-Host ""

# Ex√©cuter la commande Django avec la configuration de production
$env:DJANGO_SETTINGS_MODULE = "arbitrage_project.settings_production"
python manage.py import_grades --file=data/grades.yaml --force

# V√©rifier le code de retour
if ($LASTEXITCODE -eq 0) {
    Write-Host ""
    Write-Host "‚úÖ Importation termin√©e avec succ√®s!" -ForegroundColor Green
} else {
    Write-Host ""
    Write-Host "‚ùå Erreur lors de l'importation!" -ForegroundColor Red
    exit 1
}
