"""
Commande Django pour tester la cr√©ation de d√©signations et les notifications
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from accounts.models import Arbitre
from matches.models import Match, Designation
from datetime import date, time

class Command(BaseCommand):
    help = 'Cr√©er une d√©signation de test pour d√©clencher les notifications push'

    def add_arguments(self, parser):
        parser.add_argument(
            '--arbitre-id',
            type=int,
            help='ID de l\'arbitre √† d√©signer'
        )
        parser.add_argument(
            '--match-id',
            type=int,
            help='ID du match pour la d√©signation'
        )

    def handle(self, *args, **options):
        try:
            # R√©cup√©rer l'arbitre
            arbitre_id = options.get('arbitre_id')
            if arbitre_id:
                arbitre = Arbitre.objects.get(id=arbitre_id)
            else:
                # Prendre le premier arbitre disponible
                arbitre = Arbitre.objects.first()
                if not arbitre:
                    self.stdout.write(
                        self.style.ERROR('‚ùå Aucun arbitre trouv√© dans la base de donn√©es')
                    )
                    return

            # R√©cup√©rer ou cr√©er un match
            match_id = options.get('match_id')
            if match_id:
                match = Match.objects.get(id=match_id)
            else:
                # Cr√©er un match de test
                match = Match.objects.create(
                    match_type='ligue1',
                    category='senior',
                    stadium='Stade Olympique de Rad√®s',
                    match_date=date.today() + timezone.timedelta(days=7),
                    match_time=time(20, 0),
                    home_team='Club Africain',
                    away_team='√âtoile du Sahel',
                    description='Match de test pour les notifications',
                    referee=arbitre,
                    status='scheduled'
                )
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Match cr√©√©: {match}')
                )

            # Cr√©er une d√©signation
            designation = Designation.objects.create(
                match=match,
                arbitre=arbitre,
                type_designation='arbitre_principal',
                status='proposed',
                commentaires='D√©signation de test pour les notifications push'
            )

            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ D√©signation cr√©√©e: {designation}')
            )
            self.stdout.write(
                self.style.SUCCESS(f'üîî Notification push envoy√©e √† {arbitre.get_full_name()}')
            )
            self.stdout.write(
                self.style.SUCCESS(f'üì± V√©rifiez votre navigateur pour la notification')
            )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur: {e}')
            )
