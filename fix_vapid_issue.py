#!/usr/bin/env python3
"""
Script complet pour r√©soudre le probl√®me VAPID et configurer les notifications push
"""

import os
import sys
import django
import base64
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arbitrage_project.settings')
django.setup()

from accounts.models import PushSubscription
from django.conf import settings

def generate_new_vapid_keys():
    """G√©n√©rer de nouvelles cl√©s VAPID valides"""
    print("üîë G√âN√âRATION DE NOUVELLES CL√âS VAPID")
    
    # G√©n√©rer une nouvelle paire de cl√©s EC
    private_key = ec.generate_private_key(ec.SECP256R1())
    public_key = private_key.public_key()
    
    # Convertir en format base64 URL-safe
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    
    public_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    
    # Extraire la cl√© publique brute et la convertir en base64
    public_raw = public_key.public_bytes(
        encoding=serialization.Encoding.X962,
        format=serialization.PublicFormat.UncompressedPoint
    )
    
    private_b64 = base64.urlsafe_b64encode(private_pem).decode('utf-8').rstrip('=')
    public_b64 = base64.urlsafe_b64encode(public_raw).decode('utf-8').rstrip('=')
    
    print(f"‚úÖ Nouvelles cl√©s VAPID g√©n√©r√©es!")
    print(f"  Cl√© priv√©e: {len(private_b64)} caract√®res")
    print(f"  Cl√© publique: {len(public_b64)} caract√®res")
    
    return private_b64, public_b64

def update_vapid_config(private_key, public_key):
    """Mettre √† jour le fichier vapid_config.py"""
    print("\nüìù MISE √Ä JOUR DE VAPID_CONFIG.PY")
    
    config_content = f'''#!/usr/bin/env python3
"""
Configuration VAPID pour les notifications push
"""

# Cl√©s VAPID fonctionnelles g√©n√©r√©es automatiquement
VAPID_PRIVATE_KEY = "{private_key}"
VAPID_PUBLIC_KEY = "{public_key}"
VAPID_EMAIL = "admin@arbitrage.tn"

# Configuration des notifications
NOTIFICATION_CONFIG = {{
    'default_icon': '/static/images/notification-icon.png',
    'default_badge': '/static/images/badge-icon.png',
    'default_tag': 'arbitrage',
    'require_interaction': True,
    'silent': False,
    'vibrate': [200, 100, 200],
    'actions': [
        {{
            'action': 'view',
            'title': 'Voir',
            'icon': '/static/images/view-icon.png'
        }},
        {{
            'action': 'dismiss',
            'title': 'Fermer'
        }}
    ]
}}

# Types de notifications support√©s
NOTIFICATION_TYPES = {{
    'designation_created': {{
        'title': 'üèÜ Nouvelle D√©signation d\\'Arbitrage',
        'icon': '/static/images/designation-icon.png',
        'tag': 'designation',
        'priority': 'high'
    }},
    'designation_updated': {{
        'title': 'üîÑ D√©signation Mise √† Jour',
        'icon': '/static/images/update-icon.png',
        'tag': 'designation_update',
        'priority': 'normal'
    }},
    'designation_cancelled': {{
        'title': '‚ùå D√©signation Annul√©e',
        'icon': '/static/images/cancel-icon.png',
        'tag': 'designation_cancel',
        'priority': 'high'
    }},
    'match_reminder': {{
        'title': '‚è∞ Rappel de Match',
        'icon': '/static/images/reminder-icon.png',
        'tag': 'reminder',
        'priority': 'normal'
    }}
}}
'''
    
    with open('vapid_config.py', 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print("‚úÖ vapid_config.py mis √† jour")

def update_django_settings():
    """Ajouter les cl√©s VAPID aux param√®tres Django"""
    print("\n‚öôÔ∏è  MISE √Ä JOUR DES PARAM√àTRES DJANGO")
    
    settings_file = 'arbitrage_project/settings.py'
    
    try:
        with open(settings_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier si les cl√©s VAPID sont d√©j√† pr√©sentes
        if 'VAPID_PRIVATE_KEY' in content:
            print("  ‚ÑπÔ∏è  Les cl√©s VAPID sont d√©j√† dans settings.py")
            return True
        
        # Ajouter les cl√©s VAPID √† la fin du fichier
        vapid_config = '''
# ============================================================================
# CONFIGURATION VAPID POUR LES NOTIFICATIONS PUSH
# ============================================================================

# Importer la configuration VAPID
try:
    from vapid_config import VAPID_PRIVATE_KEY, VAPID_PUBLIC_KEY, VAPID_EMAIL
except ImportError:
    # Valeurs par d√©faut si le fichier n'est pas trouv√©
    VAPID_PRIVATE_KEY = "default_private_key"
    VAPID_PUBLIC_KEY = "default_public_key"
    VAPID_EMAIL = "admin@arbitrage.tn"
'''
        
        # Ajouter avant la derni√®re ligne
        if content.endswith('\n'):
            content += vapid_config
        else:
            content += '\n' + vapid_config
        
        with open(settings_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Param√®tres Django mis √† jour avec les cl√©s VAPID")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour de settings.py: {e}")
        return False

def update_frontend_config(public_key):
    """Mettre √† jour la configuration frontend avec la nouvelle cl√© publique"""
    print("\nüåê MISE √Ä JOUR DE LA CONFIGURATION FRONTEND")
    
    frontend_config = f'frontend/src/config/environment.ts'
    
    try:
        with open(frontend_config, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Remplacer la cl√© publique VAPID
        old_key_pattern = r"PUBLIC_KEY: '[^']*'"
        new_key_line = f"PUBLIC_KEY: '{public_key}'"
        
        if old_key_pattern in content:
            import re
            content = re.sub(old_key_pattern, new_key_line, content)
            
            with open(frontend_config, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ Configuration frontend mise √† jour")
            return True
        else:
            print("  ‚ÑπÔ∏è  Cl√© publique VAPID non trouv√©e dans la configuration frontend")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour frontend: {e}")
        return False

def clean_old_subscriptions():
    """Nettoyer les anciens abonnements push"""
    print("\nüóëÔ∏è  NETTOYAGE DES ANCIENS ABONNEMENTS")
    
    total_subscriptions = PushSubscription.objects.count()
    
    if total_subscriptions == 0:
        print("  ‚úÖ Aucun abonnement √† nettoyer")
        return True
    
    print(f"  üì± {total_subscriptions} abonnements trouv√©s")
    
    # Demander confirmation
    response = input(f"  ‚ùì Supprimer tous les abonnements ? (oui/non): ").lower().strip()
    if response not in ['oui', 'o', 'yes', 'y']:
        print("  ‚ùå Op√©ration annul√©e")
        return False
    
    # Supprimer tous les abonnements
    deleted_count = 0
    for subscription in PushSubscription.objects.all():
        arbitre_name = subscription.arbitre.get_full_name()
        endpoint = subscription.endpoint[:30] + "..." if len(subscription.endpoint) > 30 else subscription.endpoint
        print(f"    Suppression: {arbitre_name} - {endpoint}")
        subscription.delete()
        deleted_count += 1
    
    print(f"  ‚úÖ {deleted_count} abonnements supprim√©s")
    return True

def test_vapid_configuration():
    """Tester la configuration VAPID"""
    print("\nüß™ TEST DE LA CONFIGURATION VAPID")
    
    try:
        # Importer la configuration VAPID
        from vapid_config import VAPID_PRIVATE_KEY, VAPID_PUBLIC_KEY, VAPID_EMAIL
        
        print(f"  ‚úÖ Cl√© priv√©e: {len(VAPID_PRIVATE_KEY)} caract√®res")
        print(f"  ‚úÖ Cl√© publique: {len(VAPID_PUBLIC_KEY)} caract√®res")
        print(f"  ‚úÖ Email: {VAPID_EMAIL}")
        
        # V√©rifier que les cl√©s sont diff√©rentes
        if VAPID_PRIVATE_KEY != VAPID_PUBLIC_KEY:
            print("  ‚úÖ Les cl√©s priv√©e et publique sont diff√©rentes")
            return True
        else:
            print("  ‚ùå Les cl√©s priv√©e et publique sont identiques")
            return False
            
    except ImportError as e:
        print(f"  ‚ùå Erreur d'import VAPID: {e}")
        return False
    except Exception as e:
        print(f"  ‚ùå Erreur lors du test: {e}")
        return False

def fix_vapid_issue():
    """R√©soudre compl√®tement le probl√®me VAPID"""
    
    print("üîß R√âSOLUTION COMPL√àTE DU PROBL√àME VAPID")
    print("=" * 60)
    
    # 1. G√©n√©rer de nouvelles cl√©s VAPID
    private_key, public_key = generate_new_vapid_keys()
    
    # 2. Mettre √† jour la configuration VAPID
    update_vapid_config(private_key, public_key)
    
    # 3. Mettre √† jour les param√®tres Django
    if not update_django_settings():
        print("‚ö†Ô∏è  Impossible de mettre √† jour settings.py, continuons...")
    
    # 4. Mettre √† jour la configuration frontend
    update_frontend_config(public_key)
    
    # 5. Nettoyer les anciens abonnements
    clean_old_subscriptions()
    
    # 6. Tester la configuration
    if test_vapid_configuration():
        print("\nüéØ PROBL√àME VAPID R√âSOLU!")
        print("\nüí° PROCHAINES √âTAPES:")
        print("  1. Red√©marrer le serveur Django")
        print("  2. Les utilisateurs devront se reconnecter")
        print("  3. Accepter les notifications push √† nouveau")
        print("  4. Les notifications fonctionneront avec les nouvelles cl√©s")
        print("\nüîë NOUVELLES CL√âS VAPID:")
        print(f"  Priv√©e: {private_key}")
        print(f"  Publique: {public_key}")
        return True
    else:
        print("\n‚ùå La configuration VAPID n'est pas correcte")
        return False

if __name__ == "__main__":
    success = fix_vapid_issue()
    sys.exit(0 if success else 1)

