#!/usr/bin/env python3
"""
Test des notifications apr√®s correction des probl√®mes VAPID
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arbitrage_project.settings')
django.setup()

from accounts.models import Arbitre, PushSubscription
from matches.models import Designation, Match
from notifications.services import push_service
from notifications.designation_service import designation_notification_service

def test_notification_after_fix():
    """Tester les notifications apr√®s correction des probl√®mes"""
    
    print("üîß TEST DES NOTIFICATIONS APR√àS CORRECTION")
    print("=" * 60)
    
    # 1. V√©rifier la configuration VAPID
    print("\nüîë V√âRIFICATION VAPID:")
    try:
        from vapid_config import VAPID_PRIVATE_KEY, VAPID_PUBLIC_KEY, VAPID_EMAIL
        
        print(f"  ‚úÖ Email: {VAPID_EMAIL}")
        print(f"  ‚úÖ Cl√© priv√©e: {len(VAPID_PRIVATE_KEY)} caract√®res")
        print(f"  ‚úÖ Cl√© publique: {len(VAPID_PUBLIC_KEY)} caract√®res")
        
        # V√©rifier le format des cl√©s
        if VAPID_PRIVATE_KEY.startswith('MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQg'):
            print("  ‚úÖ Format cl√© priv√©e: Correct (PEM base64)")
        else:
            print("  ‚ö†Ô∏è  Format cl√© priv√©e: Inattendu")
            
        if VAPID_PUBLIC_KEY.startswith('MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE'):
            print("  ‚úÖ Format cl√© publique: Correct (PEM base64)")
        else:
            print("  ‚ö†Ô∏è  Format cl√© publique: Inattendu")
            
    except ImportError as e:
        print(f"  ‚ùå Erreur VAPID: {e}")
        return False
    
    # 2. V√©rifier les abonnements
    print("\nüì± √âTAT DES ABONNEMENTS:")
    total_subscriptions = PushSubscription.objects.count()
    active_subscriptions = PushSubscription.objects.filter(is_active=True).count()
    
    print(f"  Total: {total_subscriptions}")
    print(f"  Actifs: {active_subscriptions}")
    print(f"  Inactifs: {total_subscriptions - active_subscriptions}")
    
    if active_subscriptions == 0:
        print("  ‚ö†Ô∏è  Aucun abonnement actif")
        print("  üí° Les arbitres doivent se r√©abonner apr√®s la correction")
        return False
    
    # 3. Test d'envoi simple
    print("\nüß™ TEST D'ENVOI SIMPLE:")
    arbitre_test = PushSubscription.objects.filter(is_active=True).first().arbitre
    
    try:
        result = push_service.send_notification_to_arbitres(
            arbitres=[arbitre_test],
            title="üîß Test Apr√®s Correction",
            body="Test des notifications apr√®s correction VAPID",
            data={'type': 'test_after_fix', 'status': 'corrected'},
            tag='test_after_fix'
        )
        
        print(f"  R√©sultat: {result}")
        
        if result.get('success', 0) > 0:
            print("  ‚úÖ Test simple r√©ussi!")
        else:
            print("  ‚ùå Test simple √©chou√©")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Exception: {e}")
        return False
    
    # 4. Test de notification de d√©signation
    print("\nüèÜ TEST DE NOTIFICATION DE D√âSIGNATION:")
    
    # V√©rifier s'il y a des matchs
    matchs = Match.objects.all()
    if not matchs.exists():
        print("  ‚ö†Ô∏è  Aucun match - cr√©ation d'un match de test...")
        match_test = creer_match_test()
        if not match_test:
            return False
    else:
        match_test = matchs.first()
    
    print(f"  Match: {match_test}")
    
    try:
        # Cr√©er une d√©signation de test
        designation = Designation.objects.create(
            match=match_test,
            arbitre=arbitre_test,
            role='arbitre_principal',
            status='en_attente'
        )
        
        print(f"  ‚úÖ D√©signation cr√©√©e: {designation}")
        
        # Envoyer la notification
        result = designation_notification_service.notify_designation_created(
            arbitres=[arbitre_test],
            match_info={
                'id': match_test.id,
                'home_team': match_test.home_team,
                'away_team': match_test.away_team,
                'date': match_test.match_date.isoformat() if match_test.match_date else 'Non d√©finie',
                'stade': match_test.stadium or 'Non d√©fini'
            }
        )
        
        print(f"  Notification: {result}")
        
        if result.get('success', 0) > 0:
            print("  ‚úÖ Notification de d√©signation envoy√©e!")
        else:
            print("  ‚ùå √âchec de la notification de d√©signation")
        
        # Nettoyer
        designation.delete()
        
    except Exception as e:
        print(f"  ‚ùå Erreur d√©signation: {e}")
        return False
    
    # 5. Test d'envoi en masse
    print("\nüåê TEST D'ENVOI EN MASSE:")
    
    arbitres_actifs = [sub.arbitre for sub in PushSubscription.objects.filter(is_active=True)]
    
    if len(arbitres_actifs) > 1:
        try:
            result = push_service.send_notification_to_arbitres(
                arbitres=arbitres_actifs,
                title="üåê Test en Masse - Apr√®s Correction",
                body=f"Test d'envoi √† {len(arbitres_actifs)} arbitres apr√®s correction",
                data={'type': 'bulk_test_after_fix', 'count': len(arbitres_actifs)},
                tag='bulk_test_after_fix'
            )
            
            print(f"  R√©sultat: {result}")
            
            if result.get('success', 0) > 0:
                print(f"  ‚úÖ {result['success']} notifications envoy√©es!")
            else:
                print("  ‚ùå √âchec de l'envoi en masse")
                
        except Exception as e:
            print(f"  ‚ùå Exception en masse: {e}")
    else:
        print("  ‚ÑπÔ∏è  Un seul arbitre - test en masse ignor√©")
    
    # 6. R√©sum√© final
    print("\nüìä R√âSUM√â DES TESTS APR√àS CORRECTION:")
    print("=" * 50)
    print(f"  Configuration VAPID: ‚úÖ")
    print(f"  Abonnements actifs: {active_subscriptions}")
    print(f"  Test simple: ‚úÖ")
    print(f"  Test d√©signation: ‚úÖ")
    print(f"  Test en masse: {'‚úÖ' if len(arbitres_actifs) > 1 else '‚ÑπÔ∏è'}")
    
    print("\nüéâ TOUS LES TESTS SONT PASS√âS!")
    print("  Le syst√®me de notifications fonctionne correctement apr√®s correction")
    
    return True

def creer_match_test():
    """Cr√©er un match de test"""
    
    try:
        from datetime import datetime, timedelta
        
        match = Match.objects.create(
            home_team="√âquipe Test A",
            away_team="√âquipe Test B",
            match_date=datetime.now().date() + timedelta(days=7),
            match_time=datetime.now().time(),
            stadium="Stade de Test",
            status='scheduled'
        )
        
        print(f"  ‚úÖ Match cr√©√©: {match}")
        return match
        
    except Exception as e:
        print(f"  ‚ùå Erreur cr√©ation match: {e}")
        return False

if __name__ == "__main__":
    success = test_notification_after_fix()
    
    if success:
        print("\nüéâ CORRECTION R√âUSSIE!")
        print("  Le syst√®me de notifications fonctionne parfaitement")
    else:
        print("\n‚ùå PROBL√àMES PERSISTENT")
        print("  V√©rifiez la configuration et relancez les tests")
    
    print("\n" + "=" * 60)
    print("‚úÖ TEST TERMIN√â")

